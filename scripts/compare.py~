#!/usr/bin/env python3

import sys
sys.path.append('..')
sys.path.append('.')

import argparse
import logging
from pprint import pprint
import quickcompare.filesize
import quickcompare.hash
import quickcompare.operations
from quickcompare.utility import dupfiles_count
import datetime


if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG)
    parser = argparse.ArgumentParser()
    parser.add_argument('directory')
    parser.add_argument('--remove_dups', default=False, action='store_true', help='Remove duplicates')
    parser.add_argument('full_checksum', default=False, action='store_true', help='Calculate a full checksum of the file')
    args = parser.parse_args()

    dup_sizes = quickcompare.filesize.duplicates(args.directory)
    print('size dups: %d' % dupfiles_count(dup_sizes))

    if args.full_checksum:
        dup_hash = quickcompare.hash.duplicates_in_dict(dup_sizes, limit=None)
        print('hash dups full: %d' % dupfiles_count(dup_hash))
    else:
        dup_hash = quickcompare.hash.duplicates_in_dict(dup_sizes, limit=1024)
        print('hash dups 1024: %d' % dupfiles_count(dup_hash))


    if args.remove_dups:
        quickcompare.operations.remove(dup_hash)
    # pprint(dict(dup_hash))